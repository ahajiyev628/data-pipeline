x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-my-airflow-image2:2.10.5}
  env_file: .env
  volumes:
    # - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/code_base/
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/files:/opt/airflow/files
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    # - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock

    # Mount Minikube certificates and kubeconfig (entire .minikube folder for easier access)
    - ~/.minikube:/home/airflow/.minikube:ro
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config/kubeconfig:/home/airflow/.kube/config:ro

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
  environment:
    - KUBECONFIG=/home/airflow/.kube/config

services:
  postgres:
    image: postgres:15
    container_name: postgres
    networks:
      - airflow_spark_minio_grafana
    env_file: .env
    ports: 
      - 5433:5432
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    networks:
      - airflow_spark_minio_grafana
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow_spark_minio_grafana
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init
    networks:
      - airflow_spark_minio_grafana
    # yamllint disable rule:line-length
    # yamllint enable rule:line-length
    environment:
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      # _PIP_ADDITIONAL_REQUIREMENTS: " -r /requirements.txt"
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/:/sources
  
  git-sync:
    image: registry.k8s.io/git-sync/git-sync:v4.2.3
    container_name: git-sync
    user: "${AIRFLOW_UID:-50000}:0"
    env_file: .env
    command:
      - --repo=${DAGS_REPO}
      - --root=/git
      - --period=10s
      - --ref=HEAD
      - --max-failures=1000000000
      - --verbose=2
      - --username=${GITHUB_USERNAME}
      - --password-file=/git-creds/password
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/git
      - ./git-credentials:/git-creds:ro

  # Minio
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-06-02T23-17-26Z
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file: .env
    command: server /data --console-address ":9001" --address ":9000"
    volumes:
      - minio:/data
    networks:
      - airflow_spark_minio_grafana

  # Spark
  spark_client:
    container_name: spark_client
    image: veribilimiokulu/pyspark:3.5.3_python-3.12_java17
    ports:
      - 8888:8888
      - 4040:4040
    networks:
      - airflow_spark_minio_grafana
    volumes:
      - spark:/dataops
    command: sleep infinity

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - airflow_spark_minio_grafana
    depends_on:
      - loki

  # Loki
  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    volumes:
      - loki:/loki
    ports:
      - "3100:3100"
    networks:
      - airflow_spark_minio_grafana


  # Promtail (for reading Airflow logs)
  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/var/log/airflow
      - ./promtail-config.yml:/etc/promtail/promtail.yaml
    command: -config.file=/etc/promtail/promtail.yaml
    networks:
      - airflow_spark_minio_grafana
    depends_on:
      - loki

volumes:
  postgres-db-volume:
  airflow:
  minio:
  spark:
  grafana-storage:
  loki:

networks:
  airflow_spark_minio_grafana:
    driver: bridge
